import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor
from lightgbm import LGBMRegressor

# Load dataset (example: Kaggle House Prices - train.csv)
df = pd.read_csv("train.csv")

# Handle missing values
df = df.dropna(axis=1, thresh=0.9 * len(df))  # Drop columns with >10% missing
df = df.fillna(df.median(numeric_only=True))  # Fill remaining missing with median

# Select numeric features only for simplicity
numeric_df = df.select_dtypes(include=[np.number])
X = numeric_df.drop("SalePrice", axis=1)
y = numeric_df["SalePrice"]

# Train/Test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Define models
models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1.0),
    "Lasso Regression": Lasso(alpha=0.1),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42),
    "LightGBM": LGBMRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

# Train and evaluate models
results = {}
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    preds = model.predict(X_test_scaled)
    rmse = np.sqrt(mean_squared_error(y_test, preds))
    r2 = r2_score(y_test, preds)
    results[name] = {"RMSE": rmse, "R2 Score": r2}
    print(f"{name} => RMSE: {rmse:.2f}, R2 Score: {r2:.3f}")

# Display comparison
results_df = pd.DataFrame(results).T.sort_values("RMSE")
print("\nModel Performance Comparison:\n", results_df)

# Visualize top 3 model predictions vs actuals
top_model_name = results_df.index[0]
top_model = models[top_model_name]
y_pred = top_model.predict(X_test_scaled)

plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(f"{top_model_name} - Actual vs Predicted")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.show()
